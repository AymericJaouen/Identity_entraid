# ===== CONFIGURATION =====
$tenantId = "f8cbc48a-1801-4c7b-ac65-87255b767462"
$appId = "757a015c-e7bf-412e-bbcf-057ec5ff565e"
$storedSecret = "<OPTIONAL-STORED-SECRET-VALUE>"  # Leave empty if not known
$savePath = ".\SecureSecrets\NewClientSecret.txt"

# ===== Connect to Microsoft Graph =====
Connect-MgGraph -Scopes "Application.ReadWrite.All"

# ===== Get the application =====
$app = Get-MgApplication -Filter "appId eq '$appId'"
if (-not $app) {
    Write-Error "App not found with AppId $appId"
    return
}

Write-Host "âœ… Found application: $($app.DisplayName)"

# ===== Check secret validity by dates =====
$now = Get-Date
$validByDate = $app.PasswordCredentials | Where-Object {
    $_.StartDateTime -le $now -and $_.EndDateTime -gt $now
}

if ($validByDate) {
    Write-Host "`nðŸ”Ž Valid secrets by date:"
    $validByDate | Format-Table DisplayName, StartDateTime, EndDateTime
} else {
    Write-Host "No secrets are currently valid by date."
}

# ===== Optional: Test the known stored secret value =====
function Test-ClientSecret {
    param (
        [string]$ClientId,
        [string]$Secret,
        [string]$TenantId,
        [string]$Scope = "https://graph.microsoft.com/.default"
    )

    $url = "https://login.microsoftonline.com/$TenantId/oauth2/v2.0/token"
    $body = @{
        client_id     = $ClientId
        client_secret = $Secret
        scope         = $Scope
        grant_type    = "client_credentials"
    }

    try {
        $response = Invoke-RestMethod -Uri $url -Method Post -Body $body -ContentType "application/x-www-form-urlencoded"
        Write-Host "The stored secret is valid. Token obtained."
        return $true
    } catch {
        Write-Host "Stored secret is invalid or expired:"
        Write-Host $_.Exception.Message
        return $false
    }
}

$secretValid = $false
if ($storedSecret -and $storedSecret -ne "") {
    $secretValid = Test-ClientSecret -ClientId $appId -Secret $storedSecret -TenantId $tenantId
}

# ===== If no secret is valid, create a new one =====
if (-not $validByDate -and -not $secretValid) {
    Write-Host "Creating a new client secret..."

    $newSecret = @{
        PasswordCredential = @{
            DisplayName = "AutoGeneratedSecret_$(Get-Date -Format 'yyyyMMdd_HHmmss')"
            EndDateTime = (Get-Date).AddYears(1)
        }
    }

    $createdSecret = Add-MgApplicationPassword -ApplicationId $app.Id -BodyParameter $newSecret

    Write-Host "New client secret created. Saving to file:"
    Write-Host $savePath

    # Save secret value to file
    $createdSecret.SecretText | Out-File -FilePath $savePath -Encoding UTF8 -Force
} else {
    Write-Host "No need to create a new secret â€” at least one is valid."
}